"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Users,
  BookOpen,
  Plus,
  Calendar,
  Award,
  Settings,
  Copy,
  Check,
  Edit,
  Eye,
  Send,
  Download,
  Upload,
  MessageSquare,
  Bell,
  ArrowLeft,
  Target,
  TrendingUp,
  AlertCircle,
} from "lucide-react"

import { supabase } from "@/lib/supabaseClient"

type DbClassroom = {
  id: string
  name: string
  subject: string | null
  code: string
  description: string | null
  schedule: string | null
  room: string | null
  color: string | null
  teacher_id: string
}

type DbTeacher = {
  user_id: string
  name: string | null
  email: string
}

type DbRosterRow = {
  user_id: string
  status: string
  joined_at: string
  role: string
  profiles: { 
    user_id: string
    name: string | null
    email: string 
  }
}

type DbAssignment = {
  id: string
  title: string
  type: string
  due_at: string | null
  points: number | null
  status: string
  description: string | null
}

type DbAnnouncement = {
  id: string
  title: string
  content: string
  author: string | null
  created_at: string
}

type DbSubmission = {
  id: string              // submission id (multiple submissions possible)
  assignment_id: string
  user_id: string
  submitted_at: string
  score: number | null
  status: string
  content: string | null
  assignments: {
    title: string
    type: string
    due_at: string | null
    points: number | null
  }
}

type DbMaterial = {
  id: string
  title: string
  description: string | null
  file_url: string | null
  uploaded_at: string
  type: string
}

interface ClassroomDetailProps {
  classroomId: string
}

export function ClassroomDetail({ classroomId }: ClassroomDetailProps) {
  const [activeTab, setActiveTab] = useState("overview")
  const [copiedCode, setCopiedCode] = useState(false)
  const [isCreateAssignmentOpen, setIsCreateAssignmentOpen] = useState(false)
  const [isCreateAnnouncementOpen, setIsCreateAnnouncementOpen] = useState(false)
  const [newAssignment, setNewAssignment] = useState({
    title: "",
    type: "assignment",
    dueDate: "",
    points: "",
    description: "",
  })
  const [newAnnouncement, setNewAnnouncement] = useState({
    title: "",
    content: "",
  })

  const [classroom, setClassroom] = useState<DbClassroom | null>(null)
  const [teacher, setTeacher] = useState<DbTeacher | null>(null)
  const [announcements, setAnnouncements] = useState<DbAnnouncement[]>([])  
  const [assignments, setAssignments] = useState<DbAssignment[]>([])  
  const [roster, setRoster] = useState<DbRosterRow[]>([])
  const [materials, setMaterials] = useState<DbMaterial[]>([])  
  const [submissions, setSubmissions] = useState<DbSubmission[]>([])  
  const [currentUserId, setCurrentUserId] = useState<string | null>(null)
  const [userRole, setUserRole] = useState<string | null>(null)

  useEffect(() => {
    const load = async () => {
      // Get current user
      const { data: userData } = await supabase.auth.getUser()
      const uid = userData.user?.id || null
      setCurrentUserId(uid)

      if (!uid) return

      // Check user role in this classroom
      const { data: membership } = await supabase
        .from("classroom_memberships")
        .select("role")
        .eq("classroom_id", classroomId)
        .eq("user_id", uid)
        .maybeSingle()

      const role = membership?.role || "STUDENT"
      setUserRole(role)

      const { data: cls } = await supabase
        .from("classrooms")
        .select("id,name,subject,code,description,schedule,room,color,teacher_id")
        .eq("id", classroomId)
        .maybeSingle()
      setClassroom(cls)

      // Fetch teacher information
      if (cls?.teacher_id) {
        const { data: teacherData } = await supabase
          .from("profiles")
          .select("user_id,name,email")
          .eq("user_id", cls.teacher_id)
          .maybeSingle()
        setTeacher(teacherData)
      }

      const { data: anns } = await supabase
        .from("announcements")
        .select("id,title,content,author,created_at")
        .eq("classroom_id", classroomId)
        .order("created_at", { ascending: false })
      setAnnouncements(anns || [])

      const { data: asg } = await supabase
        .from("assignments")
        .select("id,title,type,due_at,points,status,description")
        .eq("classroom_id", classroomId)
        .order("created_at", { ascending: false })
      setAssignments(asg || [])

      // Load materials
      const { data: mats } = await supabase
        .from("materials")
        .select("id,title,description,file_url,uploaded_at,type")
        .eq("classroom_id", classroomId)
        .order("uploaded_at", { ascending: false })
      setMaterials(mats || [])

      if (role === "TEACHER") {
        // First get the classroom memberships
        const { data: memberships, error: membershipsError } = await supabase
          .from("classroom_memberships")
          .select("user_id, status, joined_at, role")
          .eq("classroom_id", classroomId)
          .eq("status", "active")
          .eq("role", "STUDENT")
        
        console.log("Memberships:", { memberships, membershipsError })
        
        if (memberships && memberships.length > 0) {
          // Then get the profiles for those users
          const userIds = memberships.map(m => m.user_id)
          const { data: profiles, error: profilesError } = await supabase
            .from("profiles")
            .select("user_id, name, email")
            .in("user_id", userIds)
          
          console.log("Profiles:", { profiles, profilesError })
          
          // For users without profiles, get their email from auth.users
          const missingProfileUserIds = userIds.filter(id => 
            !profiles?.find(p => p.user_id === id)
          )
          
          console.log("Users missing profiles:", missingProfileUserIds)
          
          // Try to get missing user info from auth metadata or create default profiles
          if (missingProfileUserIds.length > 0) {
            // Create missing profiles with fallback data
            const missingProfiles = await Promise.all(
              missingProfileUserIds.map(async (userId) => {
                // Try to create a profile for this user
                const { data: newProfile, error } = await supabase
                  .from("profiles")
                  .insert({
                    user_id: userId,
                    email: `user-${userId.slice(0, 8)}@unknown.com`, // Fallback email
                    name: `User ${userId.slice(0, 8)}`, // Fallback name
                    role: 'STUDENT'
                  })
                  .select()
                  .single()
                
                if (error) {
                  console.error('Error creating profile:', error)
                  return {
                    user_id: userId,
                    name: `Student ${userId.slice(0, 8)}`,
                    email: `unknown-${userId.slice(0, 8)}@student.com`
                  }
                }
                return newProfile
              })
            )
            
            // Add the missing profiles to the profiles array
            profiles?.push(...missingProfiles)
          }
          
          // Combine the data
          const rosterData = memberships.map(membership => {
            const profile = profiles?.find(p => p.user_id === membership.user_id)
            return {
              ...membership,
              profiles: profile || {
                user_id: membership.user_id,
                name: `Student ${membership.user_id.slice(0, 8)}`,
                email: `unknown-${membership.user_id.slice(0, 8)}@student.com`
              }
            }
          })
          
          console.log("Combined roster data:", rosterData)
          setRoster(rosterData as any)
        } else {
          setRoster([])
        }
      } else {
        // Students see their own submissions (only after assignments are loaded)
        if (assignments.length > 0) {
          const { data: subs } = await supabase
            .from("submissions")
            .select(`
              id,assignment_id,user_id,submitted_at,score,status,content,
              assignments(title,type,due_at,points)
            `)
            .eq("user_id", uid)
            .in("assignment_id", assignments.map(a => a.id))
          setSubmissions((subs as any) || [])
        }
      }
    }
    load()
  }, [classroomId])

  const copyClassCode = () => {
    if (!classroom) return
    navigator.clipboard.writeText(classroom.code)
    setCopiedCode(true)
    setTimeout(() => setCopiedCode(false), 2000)
  }

  const handleCreateAssignment = () => {
    if (newAssignment.title && newAssignment.dueDate) {
      // In a real app, this would make an API call
      console.log("Creating assignment:", newAssignment)
      setNewAssignment({ title: "", type: "assignment", dueDate: "", points: "", description: "" })
      setIsCreateAssignmentOpen(false)
    }
  }

  const handleCreateAnnouncement = () => {
    if (newAnnouncement.title && newAnnouncement.content) {
      // In a real app, this would make an API call
      console.log("Creating announcement:", newAnnouncement)
      setNewAnnouncement({ title: "", content: "" })
      setIsCreateAnnouncementOpen(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      {/* Header */}
      <header className="border-b bg-card/80 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={() => window.history.back()} className="hover:bg-primary/10">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>

            <div className={`${classroom?.color || "bg-gradient-to-br from-blue-500 to-purple-600"} p-4 rounded-lg text-white flex-1`}>
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-2xl font-bold">{classroom?.name || "Classroom"}</h1>
                  <p className="text-white/90">
                    {classroom?.subject || ""}
                  </p>
                  <p className="text-white/80 text-sm">
                    {classroom?.schedule || ""} {classroom?.room ? `• ${classroom.room}` : ""}
                  </p>
                  {teacher && (
                    <p className="text-white/70 text-xs mt-1">
                      Instructor: {teacher.name || teacher.email}
                    </p>
                  )}
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-right text-white/90">
                    <div className="flex items-center gap-4 text-sm">
                      <div className="flex items-center gap-1">
                        <Users className="w-4 h-4" />
                        <span>{roster.length}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <BookOpen className="w-4 h-4" />
                        <span>{assignments.length}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Award className="w-4 h-4" />
                        <span>{assignments.filter((a) => a.type === "quiz").length}</span>
                      </div>
                    </div>
                  </div>

                  <Button variant="ghost" size="sm" onClick={copyClassCode} className="text-white hover:bg-white/20">
                    {copiedCode ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                    <span className="ml-2 font-mono">{classroom?.code}</span>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className={`grid w-full ${userRole === 'STUDENT' ? 'grid-cols-4' : 'grid-cols-5'} bg-card/50 backdrop-blur-sm`}>
            <TabsTrigger
              value="overview"
              className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              Overview
            </TabsTrigger>
            <TabsTrigger
              value="assignments"
              className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              {userRole === 'STUDENT' ? 'My Work' : 'Assignments'}
            </TabsTrigger>
            {userRole === 'TEACHER' && (
              <TabsTrigger
                value="students"
                className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
              >
                Students
              </TabsTrigger>
            )}
            <TabsTrigger
              value="grades"
              className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              {userRole === 'STUDENT' ? 'My Grades' : 'Grades'}
            </TabsTrigger>
            <TabsTrigger
              value="settings"
              className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              Settings
            </TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Announcements */}
              <div className="lg:col-span-2">
                <Card>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          <Bell className="w-5 h-5" />
                          Announcements
                        </CardTitle>
                        <CardDescription>Latest updates and news</CardDescription>
                      </div>
                      {userRole === 'TEACHER' && (
                        <Dialog open={isCreateAnnouncementOpen} onOpenChange={setIsCreateAnnouncementOpen}>
                          <DialogTrigger asChild>
                            <Button size="sm" className="gradient-primary">
                              <Plus className="w-4 h-4 mr-2" />
                              New
                            </Button>
                          </DialogTrigger>
                          <DialogContent>
                            <DialogHeader>
                              <DialogTitle>Create Announcement</DialogTitle>
                              <DialogDescription>Share important updates with your class</DialogDescription>
                            </DialogHeader>
                            <div className="space-y-4">
                              <div className="space-y-2">
                                <Label htmlFor="announcementTitle">Title</Label>
                                <Input
                                  id="announcementTitle"
                                  placeholder="Announcement title"
                                  value={newAnnouncement.title}
                                  onChange={(e) => setNewAnnouncement((prev) => ({ ...prev, title: e.target.value }))}
                                />
                              </div>
                              <div className="space-y-2">
                                <Label htmlFor="announcementContent">Content</Label>
                                <Textarea
                                  id="announcementContent"
                                  placeholder="Write your announcement..."
                                  rows={4}
                                  value={newAnnouncement.content}
                                  onChange={(e) => setNewAnnouncement((prev) => ({ ...prev, content: e.target.value }))}
                                />
                              </div>
                              <div className="flex gap-2 pt-4">
                                <Button
                                  variant="outline"
                                  onClick={() => setIsCreateAnnouncementOpen(false)}
                                  className="flex-1"
                                >
                                  Cancel
                                </Button>
                                <Button onClick={handleCreateAnnouncement} className="flex-1 gradient-primary">
                                  <Send className="w-4 h-4 mr-2" />
                                  Post
                                </Button>
                              </div>
                            </div>
                          </DialogContent>
                        </Dialog>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {announcements.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          <Bell className="w-12 h-12 mx-auto mb-3 opacity-50" />
                          <p>No announcements yet</p>
                        </div>
                      ) : (
                        announcements.map((announcement) => (
                          <div key={announcement.id} className="p-4 border rounded-lg">
                            <div className="flex items-start justify-between mb-2">
                              <h4 className="font-medium">{announcement.title}</h4>
                              <span className="text-xs text-muted-foreground">{new Date(announcement.created_at).toLocaleDateString()}</span>
                            </div>
                            <p className="text-sm text-muted-foreground mb-2">{announcement.content}</p>
                            <p className="text-xs text-muted-foreground">By {announcement.author || "Teacher"}</p>
                          </div>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Materials Section for Students */}
                {userRole === 'STUDENT' && (
                  <Card className="mt-6">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <BookOpen className="w-5 h-5" />
                        Course Materials
                      </CardTitle>
                      <CardDescription>Resources and files shared by your teacher</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {materials.length === 0 ? (
                          <div className="text-center py-8 text-muted-foreground">
                            <BookOpen className="w-12 h-12 mx-auto mb-3 opacity-50" />
                            <p>No materials available yet</p>
                          </div>
                        ) : (
                          materials.map((material) => (
                            <div key={material.id} className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/30">
                              <div className="flex items-center gap-3">
                                <div className="w-8 h-8 rounded bg-primary/10 flex items-center justify-center">
                                  <BookOpen className="w-4 h-4 text-primary" />
                                </div>
                                <div>
                                  <p className="font-medium">{material.title}</p>
                                  <p className="text-sm text-muted-foreground">{material.description || 'No description'}</p>
                                </div>
                              </div>
                              <div className="flex items-center gap-2">
                                <span className="text-xs text-muted-foreground">
                                  {new Date(material.uploaded_at).toLocaleDateString()}
                                </span>
                                <Button size="sm" variant="outline">
                                  <Download className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>

              {/* Quick Stats */}
              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Class Statistics</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Total Students</span>
                      <span className="font-medium">{roster.length}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Active Assignments</span>
                      <span className="font-medium">{assignments.filter((a) => a.status === "active").length}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Avg. Grade</span>
                      <span className="font-medium">82.5%</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Completion Rate</span>
                      <span className="font-medium">89%</span>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Recent Activity</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center gap-3 text-sm">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span>Alice submitted assignment</span>
                      </div>
                      <div className="flex items-center gap-3 text-sm">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span>New quiz created</span>
                      </div>
                      <div className="flex items-center gap-3 text-sm">
                        <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <span>Bob joined the class</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Assignments Tab */}
          <TabsContent value="assignments" className="space-y-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-semibold">
                  {userRole === 'STUDENT' ? 'My Assignments' : 'Assignments & Assessments'}
                </h2>
                <p className="text-muted-foreground">
                  {userRole === 'STUDENT' 
                    ? 'View your assignments and submission status' 
                    : 'Manage homework, quizzes, and exams'
                  }
                </p>
              </div>
              {userRole === 'TEACHER' && (
                <Dialog open={isCreateAssignmentOpen} onOpenChange={setIsCreateAssignmentOpen}>
                  <DialogTrigger asChild>
                    <Button className="gradient-primary">
                      <Plus className="w-4 h-4 mr-2" />
                      Create Assignment
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Assignment</DialogTitle>
                      <DialogDescription>Set up a new assignment or assessment</DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="assignmentTitle">Title</Label>
                        <Input
                          id="assignmentTitle"
                          placeholder="Assignment title"
                          value={newAssignment.title}
                          onChange={(e) => setNewAssignment((prev) => ({ ...prev, title: e.target.value }))}
                        />
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="assignmentType">Type</Label>
                          <Select
                            value={newAssignment.type}
                            onValueChange={(value) => setNewAssignment((prev) => ({ ...prev, type: value }))}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="assignment">Assignment</SelectItem>
                              <SelectItem value="quiz">Quiz</SelectItem>
                              <SelectItem value="exam">Exam</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="assignmentPoints">Points</Label>
                          <Input
                            id="assignmentPoints"
                            type="number"
                            placeholder="100"
                            value={newAssignment.points}
                            onChange={(e) => setNewAssignment((prev) => ({ ...prev, points: e.target.value }))}
                          />
                        </div>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="assignmentDueDate">Due Date</Label>
                        <Input
                          id="assignmentDueDate"
                          type="date"
                          value={newAssignment.dueDate}
                          onChange={(e) => setNewAssignment((prev) => ({ ...prev, dueDate: e.target.value }))}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="assignmentDescription">Description</Label>
                        <Textarea
                          id="assignmentDescription"
                          placeholder="Assignment instructions..."
                          rows={3}
                          value={newAssignment.description}
                          onChange={(e) => setNewAssignment((prev) => ({ ...prev, description: e.target.value }))}
                        />
                      </div>
                      <div className="flex gap-2 pt-4">
                        <Button variant="outline" onClick={() => setIsCreateAssignmentOpen(false)} className="flex-1">
                          Cancel
                        </Button>
                        <Button onClick={handleCreateAssignment} className="flex-1 gradient-primary">
                          Create Assignment
                        </Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              )}
            </div>

            {userRole === 'STUDENT' ? (
              // Student view - show their submissions
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {assignments.map((assignment) => {
                  const submission = submissions.find(s => s.assignment_id === assignment.id)
                  const isOverdue = assignment.due_at && new Date(assignment.due_at) < new Date() && !submission
                  
                  return (
                    <Card key={assignment.id} className="hover:shadow-lg transition-shadow">
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div>
                            <CardTitle className="text-lg">{assignment.title}</CardTitle>
                            <CardDescription className="flex items-center gap-2">
                              <Badge variant="outline">{assignment.type}</Badge>
                              <span>{assignment.points || 0} pts</span>
                            </CardDescription>
                          </div>
                          <Badge
                            variant={
                              submission?.status === "submitted" 
                                ? "default" 
                                : submission?.status === "graded"
                                ? "secondary"
                                : isOverdue
                                ? "destructive"
                                : "outline"
                            }
                          >
                            {submission?.status === "graded" 
                              ? "Graded" 
                              : submission?.status === "submitted"
                              ? "Submitted"
                              : isOverdue
                              ? "Overdue"
                              : "Not Submitted"
                            }
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-3">
                          <p className="text-sm text-muted-foreground">{assignment.description}</p>

                          <div className="flex items-center gap-2 text-sm">
                            <Calendar className="w-4 h-4 text-muted-foreground" />
                            <span>Due: {assignment.due_at ? new Date(assignment.due_at).toLocaleDateString() : "TBD"}</span>
                          </div>

                          {submission && (
                            <div className="space-y-2 p-3 bg-muted/30 rounded-lg">
                              <div className="flex items-center justify-between text-sm">
                                <span className="text-muted-foreground">Submitted:</span>
                                <span className="font-medium">
                                  {new Date(submission.submitted_at).toLocaleDateString()}
                                </span>
                              </div>
                              {submission.score !== null && (
                                <div className="flex items-center justify-between text-sm">
                                  <span className="text-muted-foreground">Score:</span>
                                  <span className="font-medium">
                                    {submission.score}/{assignment.points || 0}
                                  </span>
                                </div>
                              )}
                            </div>
                          )}

                          <div className="flex gap-2 pt-2">
                            <Button 
                              size="sm" 
                              variant="outline" 
                              className="flex-1 bg-transparent"
                              onClick={() => window.location.href = `/assignment/${assignment.id}`}
                            >
                              <Eye className="w-4 h-4 mr-2" />
                              View
                            </Button>
                            {!submission && !isOverdue && (
                              <Button 
                                size="sm" 
                                className="flex-1 gradient-primary"
                                onClick={() => window.location.href = `/assignment/${assignment.id}/submit`}
                              >
                                <Upload className="w-4 h-4 mr-2" />
                                Submit
                              </Button>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )
                })}
              </div>
            ) : (
              // Teacher view - existing assignment management
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {assignments.map((assignment) => (
                  <Card key={assignment.id} className="hover:shadow-lg transition-shadow">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle className="text-lg">{assignment.title}</CardTitle>
                          <CardDescription className="flex items-center gap-2">
                            <Badge variant="outline">{assignment.type}</Badge>
                            <span>{assignment.points || 0} pts</span>
                          </CardDescription>
                        </div>
                        <Badge
                          variant={
                            assignment.status === "active"
                              ? "default"
                              : assignment.status === "completed"
                                ? "secondary"
                                : "outline"
                          }
                        >
                          {assignment.status}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <p className="text-sm text-muted-foreground">{assignment.description}</p>

                        <div className="flex items-center gap-2 text-sm">
                          <Calendar className="w-4 h-4 text-muted-foreground" />
                          <span>Due: {assignment.due_at ? new Date(assignment.due_at).toLocaleDateString() : "TBD"}</span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Submitted:</span>
                            <span className="ml-1 font-medium">—/{roster.length}</span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Graded:</span>
                            <span className="ml-1 font-medium">—/—</span>
                          </div>
                        </div>

                        <div className="flex gap-2 pt-2">
                          <Button size="sm" variant="outline" className="flex-1 bg-transparent">
                            <Eye className="w-4 h-4 mr-2" />
                            View
                          </Button>
                          <Button size="sm" variant="outline" className="flex-1 bg-transparent">
                            <Edit className="w-4 h-4 mr-2" />
                            Edit
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          {/* Students Tab */}
          <TabsContent value="students" className="space-y-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-semibold">Class Roster</h2>
                <p className="text-muted-foreground">Manage enrolled students</p>
              </div>
              <div className="flex gap-2">
                <Button variant="outline">
                  <Upload className="w-4 h-4 mr-2" />
                  Import
                </Button>
                <Button variant="outline">
                  <Download className="w-4 h-4 mr-2" />
                  Export
                </Button>
              </div>
            </div>

            <Card>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="border-b bg-muted/50">
                      <tr>
                        <th className="text-left p-4 font-medium">Student</th>
                        <th className="text-left p-4 font-medium">Status</th>
                        <th className="text-left p-4 font-medium">Join Date</th>
                        <th className="text-left p-4 font-medium">Last Active</th>
                        <th className="text-left p-4 font-medium">Avg. Score</th>
                        <th className="text-left p-4 font-medium">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {roster.map((student) => (
                        <tr key={student.user_id} className="border-b hover:bg-muted/30">
                          <td className="p-4">
                            <div>
                              <p className="font-medium">
                                {student.profiles?.name || 
                                 (student.profiles?.email ? student.profiles.email.split('@')[0] : "Unknown User")}
                              </p>
                              <p className="text-sm text-muted-foreground">{student.profiles?.email}</p>
                            </div>
                          </td>
                          <td className="p-4">
                            <Badge variant={student.status === "active" ? "default" : "secondary"}>
                              {student.status}
                            </Badge>
                          </td>
                          <td className="p-4 text-sm">{new Date(student.joined_at).toLocaleDateString()}</td>
                          <td className="p-4 text-sm">N/A</td>
                          <td className="p-4">
                            <div className="flex items-center gap-2">
                              <span className="font-medium">N/A</span>
                              <div
                                className={`w-2 h-2 rounded-full bg-gray-300`}
                              ></div>
                            </div>
                          </td>
                          <td className="p-4">
                            <div className="flex items-center gap-2">
                              <Button size="sm" variant="outline">
                                <Eye className="w-4 h-4" />
                              </Button>
                              <Button size="sm" variant="outline">
                                <MessageSquare className="w-4 h-4" />
                              </Button>
                              <Button size="sm" variant="outline">
                                <Settings className="w-4 h-4" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Grades Tab */}
          <TabsContent value="grades" className="space-y-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-semibold">
                  {userRole === 'STUDENT' ? 'My Grades' : 'Grade Management'}
                </h2>
                <p className="text-muted-foreground">
                  {userRole === 'STUDENT' 
                    ? 'View your performance across all assessments'
                    : 'View and manage student grades'
                  }
                </p>
              </div>
              {userRole === 'TEACHER' && (
                <div className="flex gap-2">
                  <Button variant="outline">
                    <Download className="w-4 h-4 mr-2" />
                    Export Grades
                  </Button>
                  <Button className="gradient-primary">
                    <Plus className="w-4 h-4 mr-2" />
                    Grade Assignment
                  </Button>
                </div>
              )}
            </div>

            {userRole === 'STUDENT' ? (
              // Student grades view
              <div className="space-y-6">
                {/* Student Performance Overview */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <TrendingUp className="w-5 h-5" />
                        Overall Average
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">
                        {submissions.filter(s => s.score !== null).length > 0
                          ? Math.round(
                              submissions.filter(s => s.score !== null)
                                .reduce((acc, sub) => {
                                  const assignment = assignments.find(a => a.id === sub.assignment_id)
                                  return acc + (sub.score! / (assignment?.points || 1)) * 100
                                }, 0) / submissions.filter(s => s.score !== null).length
                            )
                          : 0}%
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Based on {submissions.filter(s => s.score !== null).length} graded assignments
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Target className="w-5 h-5" />
                        Completion Rate
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">
                        {assignments.length > 0 
                          ? Math.round((submissions.length / assignments.length) * 100)
                          : 0}%
                      </div>
                      <p className="text-sm text-muted-foreground">
                        {submissions.length} of {assignments.length} assignments
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Award className="w-5 h-5" />
                        Highest Score
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">
                        {submissions.filter(s => s.score !== null).length > 0
                          ? Math.max(...submissions.filter(s => s.score !== null).map(sub => {
                              const assignment = assignments.find(a => a.id === sub.assignment_id)
                              return Math.round((sub.score! / (assignment?.points || 1)) * 100)
                            }))
                          : 0}%
                      </div>
                      <p className="text-sm text-muted-foreground">Best performance</p>
                    </CardContent>
                  </Card>
                </div>

                {/* Individual Assignment Grades */}
                <Card>
                  <CardHeader>
                    <CardTitle>Assignment Grades</CardTitle>
                    <CardDescription>Your performance on each assignment</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {assignments.map((assignment) => {
                        const submission = submissions.find(s => s.assignment_id === assignment.id)
                        const percentage = submission && submission.score !== null && assignment.points 
                          ? Math.round((submission.score / assignment.points) * 100)
                          : null
                        
                        return (
                          <div key={assignment.id} className="flex items-center justify-between p-4 border rounded-lg">
                            <div className="flex items-center gap-4">
                              <div className={`w-3 h-3 rounded-full ${
                                percentage === null 
                                  ? 'bg-gray-300' 
                                  : percentage >= 90 
                                    ? 'bg-green-500'
                                    : percentage >= 80
                                      ? 'bg-blue-500'
                                      : percentage >= 70
                                        ? 'bg-yellow-500'
                                        : 'bg-red-500'
                              }`}></div>
                              <div>
                                <p className="font-medium">{assignment.title}</p>
                                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                  <Badge variant="outline" className="text-xs">{assignment.type}</Badge>
                                  <span>Due: {assignment.due_at ? new Date(assignment.due_at).toLocaleDateString() : 'TBD'}</span>
                                </div>
                              </div>
                            </div>
                            <div className="text-right">
                              {submission?.score !== null ? (
                                <>
                                  <p className="font-medium text-lg">
                                    {submission ? submission.score : 0}/{assignment.points || 0}
                                  </p>
                                  <p className="text-sm text-muted-foreground">
                                    {percentage}%
                                  </p>
                                </>
                              ) : submission ? (
                                <p className="text-sm text-muted-foreground">
                                  Submitted - Not graded
                                </p>
                              ) : (
                                <p className="text-sm text-muted-foreground">
                                  Not submitted
                                </p>
                              )}
                            </div>
                          </div>
                        )
                      })}
                      
                      {assignments.length === 0 && (
                        <div className="text-center py-8 text-muted-foreground">
                          <Award className="w-12 h-12 mx-auto mb-3 opacity-50" />
                          <p>No assignments available yet</p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            ) : (
              // Teacher grades view - existing content
              <>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <TrendingUp className="w-5 h-5" />
                        Class Average
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">82.5%</div>
                      <p className="text-sm text-muted-foreground">+2.3% from last month</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Target className="w-5 h-5" />
                        Pass Rate
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">89%</div>
                      <p className="text-sm text-muted-foreground">25 of 28 students</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Award className="w-5 h-5" />
                        Top Performer
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-lg font-bold">Carol Davis</div>
                      <p className="text-sm text-muted-foreground">92% average</p>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>Grade Overview</CardTitle>
                    <CardDescription>Student performance across all assignments</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {roster.map((student) => (
                        <div key={student.user_id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center gap-4">
                            <div>
                              <p className="font-medium">
                                {student.profiles?.name || 
                                 (student.profiles?.email ? student.profiles.email.split('@')[0] : "Unknown User")}
                              </p>
                              <p className="text-sm text-muted-foreground">{student.profiles?.email}</p>
                            </div>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="text-right">
                              <p className="font-medium">N/A</p>
                              <p className="text-sm text-muted-foreground">N/A</p>
                            </div>
                            <div className="w-3 h-3 rounded-full bg-gray-300"></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </>
            )}
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <div>
              <h2 className="text-xl font-semibold">
                {userRole === 'STUDENT' ? 'Notification Settings' : 'Classroom Settings'}
              </h2>
              <p className="text-muted-foreground">
                {userRole === 'STUDENT' 
                  ? 'Manage how you receive notifications from this classroom'
                  : 'Manage classroom preferences and configurations'
                }
              </p>
            </div>

            {userRole === 'STUDENT' ? (
              // Student settings - focus on notifications
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Bell className="w-5 h-5" />
                      Assignment Notifications
                    </CardTitle>
                    <CardDescription>Get notified about assignments and due dates</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">New Assignments</p>
                          <p className="text-sm text-muted-foreground">Alert when teacher posts new assignments</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Due Date Reminders</p>
                          <p className="text-sm text-muted-foreground">Remind me before assignment deadlines</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Grade Updates</p>
                          <p className="text-sm text-muted-foreground">Notify when assignments are graded</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Late Submission Warnings</p>
                          <p className="text-sm text-muted-foreground">Alert when submission is overdue</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <MessageSquare className="w-5 h-5" />
                      Class Communication
                    </CardTitle>
                    <CardDescription>Stay updated with class announcements and discussions</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Announcements</p>
                          <p className="text-sm text-muted-foreground">Get notified about class announcements</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">New Materials</p>
                          <p className="text-sm text-muted-foreground">Alert when teacher uploads new materials</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Schedule Changes</p>
                          <p className="text-sm text-muted-foreground">Notify about class schedule updates</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Disabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Class Discussions</p>
                          <p className="text-sm text-muted-foreground">Notify about new discussion posts</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Disabled
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Notification Preferences</CardTitle>
                    <CardDescription>Choose how you want to receive notifications</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Email Notifications</p>
                          <p className="text-sm text-muted-foreground">Send notifications to your email</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Push Notifications</p>
                          <p className="text-sm text-muted-foreground">Show notifications in browser</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Disabled
                        </Button>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="reminderTime">Reminder Time</Label>
                        <Select defaultValue="24h">
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1h">1 hour before</SelectItem>
                            <SelectItem value="6h">6 hours before</SelectItem>
                            <SelectItem value="24h">1 day before</SelectItem>
                            <SelectItem value="48h">2 days before</SelectItem>
                            <SelectItem value="week">1 week before</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <Button className="w-full gradient-primary">Save Preferences</Button>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Privacy Settings</CardTitle>
                    <CardDescription>Control your privacy in this classroom</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Show Online Status</p>
                          <p className="text-sm text-muted-foreground">Let others see when you're online</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Share Progress</p>
                          <p className="text-sm text-muted-foreground">Allow teacher to share your progress with parents</p>
                        </div>
                        <Button variant="outline" size="sm" className="bg-green-50 text-green-700 border-green-200">
                          Enabled
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            ) : (
              // Teacher settings - existing classroom management content
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Basic Information</CardTitle>
                    <CardDescription>Update classroom details</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="className">Class Name</Label>
                      <Input id="className" defaultValue={classroom?.name || ""} />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="classDescription">Description</Label>
                      <Textarea id="classDescription" defaultValue={classroom?.description || ""} />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="classSchedule">Schedule</Label>
                        <Input id="classSchedule" defaultValue={classroom?.schedule || ""} />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="classRoom">Room</Label>
                        <Input id="classRoom" defaultValue={classroom?.room || ""} />
                      </div>
                    </div>
                    <Button className="w-full gradient-primary">Save Changes</Button>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Access Control</CardTitle>
                    <CardDescription>Manage who can join your classroom</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <p className="font-medium">Class Code</p>
                        <p className="text-sm text-muted-foreground">Students use this to join</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="font-mono">
                          {classroom?.code}
                        </Badge>
                        <Button size="sm" variant="outline" onClick={copyClassCode}>
                          {copiedCode ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                        </Button>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Allow Self-Enrollment</p>
                          <p className="text-sm text-muted-foreground">Students can join with class code</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Require Approval</p>
                          <p className="text-sm text-muted-foreground">Review join requests manually</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Disabled
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Notifications</CardTitle>
                    <CardDescription>Configure notification preferences</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Assignment Submissions</p>
                          <p className="text-sm text-muted-foreground">Get notified when students submit work</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">New Student Joins</p>
                          <p className="text-sm text-muted-foreground">Alert when someone joins the class</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Enabled
                        </Button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">Grade Reminders</p>
                          <p className="text-sm text-muted-foreground">Remind to grade pending assignments</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Disabled
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Danger Zone</CardTitle>
                    <CardDescription>Irreversible actions</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="p-4 border border-red-200 rounded-lg bg-red-50">
                      <div className="flex items-start gap-3">
                        <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
                        <div className="flex-1">
                          <p className="font-medium text-red-900">Archive Classroom</p>
                          <p className="text-sm text-red-700 mb-3">
                            This will archive the classroom and make it read-only. Students won't be able to submit new
                            work.
                          </p>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-red-300 text-red-700 hover:bg-red-100 bg-transparent"
                          >
                            Archive Classroom
                          </Button>
                        </div>
                      </div>
                    </div>

                    <div className="p-4 border border-red-200 rounded-lg bg-red-50">
                      <div className="flex items-start gap-3">
                        <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
                        <div className="flex-1">
                          <p className="font-medium text-red-900">Delete Classroom</p>
                          <p className="text-sm text-red-700 mb-3">
                            Permanently delete this classroom and all associated data. This action cannot be undone.
                          </p>
                          <Button variant="destructive" size="sm">
                            Delete Classroom
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
